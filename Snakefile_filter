"""
BUSTED-PH SNAKEFILE TO RUN BUSTED WITH 'ERROR SINK MODE' 

@Author: Avery Selberg

2023
"""

#----------------------------------------------------------------------------
# Description
#----------------------------------------------------------------------------
import os
import sys
import json
import csv
from pathlib import Path
import glob
#----------------------------------------------------------------------------
# Declares
#----------------------------------------------------------------------------

with open('config_filter.json', 'r') as input_cf:
	config = json.load(input_cf)
with open("cluster_filter.json", "r") as in_c:
  cluster = json.load(in_c)

#----------------------------------------------------------------------------
# Settings
#----------------------------------------------------------------------------
BASEDIR = os.getcwd()

# Which project are we analyzing?
FASTA_DIR = config["fasta_dir"]
TREE_DIR = config["tree_dir"]

fasta_files = [filename for filename in os.listdir(FASTA_DIR) if filename.endswith(".fasta")]
tree_files = [filename for filename in os.listdir(TREE_DIR) if filename.endswith(".bestTree")]
gene_names = [value for value in fasta_files if value +'.raxml.bestTree' in tree_files]
#gene_names = ['mitogene']
print(gene_names)

HYPHY    = config["hyphy"]
RES      = config["res"]
HYPHY_ANALYSES = config["hyphy-analyses"]

OUTDIR = config["results_directory"] 
#print(OUTDIR)

BUSTED_PH_bf = os.path.join(HYPHY_ANALYSES, "BUSTED-PH", "BUSTED-PH.bf")
LAB_bf = os.path.join(HYPHY_ANALYSES, "LabelTrees", "label-tree.bf")
CMC_bf = os.path.join(HYPHY_ANALYSES, "PAML-emulator", "CMC.bf")
BS_bf = os.path.join(HYPHY_ANALYSES, "PAML-emulator", "BranchSite.bf")

# Create output directories
Path(OUTDIR).mkdir(parents=True, exist_ok=True)

# setting for MPI
PPN = cluster["__default__"]["ppn"] 


#---------------------------------------------------------------------------- 
# rule all
#----------------------------------------------------------------------------

rule all:
    input: 
        expand(os.path.join(OUTDIR, "{GENE}.FILTER.json"), GENE = gene_names),
        expand(os.path.join(OUTDIR, "{GENE}.FILTER.fas"), GENE = gene_names),
        expand(os.path.join(OUTDIR, "{GENE}.BUSTED.json"), GENE = gene_names),
        expand(os.path.join(OUTDIR, "{GENE}.BUSTED-E.json"), GENE = gene_names),
        expand(os.path.join(OUTDIR, "{GENE}.cleaned.lab_fg_bg.nwk"), GENE = gene_names),
        expand(os.path.join(OUTDIR, "{GENE}.BUSTED-PH.json"), GENE = gene_names),
        expand(os.path.join(OUTDIR, "{GENE}.filtered.BUSTED-PH.json"), GENE = gene_names)
 #end input 
#end rule 



#---------------------------------------------------------------------------- 
# Clean files to remove hyphens in the name
#---------------------------------------------------------------------------- 
## REMOVE HYPHENS FROM FASTA##
rule clean_fasta:
    input:
        seq = os.path.join(FASTA_DIR, "{GENE}")
    output:
        seq = os.path.join(OUTDIR, "{GENE}.cleaned.ags.fas")
    shell:
         """
         python scripts/clean-fasta.py {input.seq} {output.seq}
         """
###end rule 

## REMOVE HYPHENS FROM TREES##
rule clean_tree:
    input:
        tree = os.path.join(TREE_DIR, "{GENE}" + '.raxml.bestTree')
    output:
        tree = os.path.join(OUTDIR, "{GENE}.cleaned.ags.nwk")
    shell:
         """
         python scripts/clean-tree.py {input.tree} {output.tree}
         """
###end rule 

### REMOVE HYPHENS FROM FOREGROUND SPECIES LIST##
#rule clean_list:
#    input:
#        list = os.path.join(DATA_DIRECTORY, "{GENE}", 'foreground_species.txt')
#    output:
#        list = os.path.join(OUTDIR, "{GENE}.cleaned.ags.txt")
#    shell:
#         """
#         python scripts/clean-trait.py {input.list} {output.list}
#         """
###end rule 
#---------------------------------------------------------------------------- 
# Run BUSTED WITH ERROR SINK COMPONENT
#---------------------------------------------------------------------------- 

## RUN BUSTED-E ON ALL BRANCHES##
rule busted_e:
    input:
        seq = rules.clean_fasta.output.seq,
        tree = rules.clean_tree.output.tree
    output:
        json = os.path.join(OUTDIR, "{GENE}.BUSTED-E.json"), 
        fits = os.path.join(OUTDIR, "{GENE}.BUSTED-E-fit.lf")
    shell:
         """
         {HYPHY} LIBPATH={RES} BUSTED --alignment {input.seq} --tree {input.tree} --srv Yes --starting-points 5 --output {output.json} --error-sink Yes --save-fit {output.fits}
         """
###end rule 


#---------------------------------------------------------------------------- 
# Run BUSTED WITHOUT ERROR SINK COMPONENT
#---------------------------------------------------------------------------- 
## RUN BUSTED ON ALL BRANCHES##
rule busted:
    input:
        seq = rules.clean_fasta.output.seq,
        tree = rules.clean_tree.output.tree
    output:
        json = os.path.join(OUTDIR, "{GENE}.BUSTED.json"), 
        fits = os.path.join(OUTDIR, "{GENE}.BUSTED-fit.lf")
    shell:
         """
         {HYPHY} LIBPATH={RES} BUSTED --alignment {input.seq} --tree {input.tree} --srv Yes --starting-points 5 --output {output.json} --save-fit {output.fits}
         """
## RUN BUSTED ON BACKGROUND BRANCHES##
###end rule 

#---------------------------------------------------------------------------- 
# Run FILTER STEP
#---------------------------------------------------------------------------- 

rule filter:
    input:
        e_json = rules.busted_e.output.json
    output:
        json = os.path.join(OUTDIR, "{GENE}.FILTER.json"), 
        seq = os.path.join(OUTDIR, "{GENE}.FILTER.fas")
    shell:
         """
         {HYPHY} LIBPATH={RES} error-filter {input.e_json} --output {output.seq} --output-json {output.json}
         """
###end rule 

#---------------------------------------------------------------------------- 
# Label tree
#---------------------------------------------------------------------------- 

rule label_fg:
    input:
        tree = rules.clean_tree.output.tree,
        list = '/home/agselberg/ray_finned/Scenario_1_FG.txt'
    output:
        tree = os.path.join(OUTDIR, "{GENE}.cleaned.lab_fg.nwk"), 
    shell:
         """
         {HYPHY} LIBPATH={RES} {LAB_bf} --tree {input.tree} --list {input.list} --output {output.tree} --internal-nodes "Parsimony" --label "FOREGROUND"
         """
###end rule 

rule label_bg:
    input:
        tree = rules.clean_tree.output.tree,
        list = '/home/agselberg/ray_finned/Scenario_1_BG.txt'
    output:
        tree = os.path.join(OUTDIR, "{GENE}.cleaned.lab_fg_bg.nwk"), 
    shell:
         """
         {HYPHY} LIBPATH={RES} {LAB_bf} --tree {input.tree} --list {input.list} --output {output.tree} --internal-nodes "Parsimony" --label "BACKGROUND"
         """
###end rule 
#---------------------------------------------------------------------------- 
# Run BUSTED-PH
#---------------------------------------------------------------------------- 
## RUN BUSTED-PH AFTER FILTERING##
rule busted_ph_filtered:
    input:
        seq = rules.filter.output.seq,
        tree = rules.label_bg.output.tree
    output:
        json = os.path.join(OUTDIR, "{GENE}.filtered.BUSTED-PH.json"), 
    shell:
         """
         {HYPHY} LIBPATH={RES} {BUSTED_PH_bf} --alignment {input.seq} --tree {input.tree} --srv Yes --starting-points 5 --output {output.json} --branches FOREGROUND --comparison BACKGROUND
         """
###end rule 

## RUN BUSTED-PH WITHOUT FILTERING##
rule busted_ph_unfiltered:
    input:
        seq = rules.clean_fasta.output.seq,
        tree = rules.label_bg.output.tree
    output:
        json = os.path.join(OUTDIR, "{GENE}.BUSTED-PH.json"), 
    shell:
         """
         {HYPHY} LIBPATH={RES} {BUSTED_PH_bf} --alignment {input.seq} --tree {input.tree} --srv Yes --starting-points 5 --output {output.json} --branches FOREGROUND --comparison BACKGROUND
         """
###end rule 

#----------------------------------------------------------------------------
# End of file
#----------------------------------------------------------------------------


